def cobotique_capot_32():
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.9071847407607566)
  set_gravity([0.0, 0.0, 9.82])
  step_count_8bec03fc_2bb7_4895_9c1d_71eabbf7aa05 = 0
  thread Step_Counter_Thread_e19fe5af_ab4f_4bf6_b1ce_bff559c4e78f():
    while (True):
      step_count_8bec03fc_2bb7_4895_9c1d_71eabbf7aa05 = step_count_8bec03fc_2bb7_4895_9c1d_71eabbf7aa05 + 1
      sync()
    end
  end
  run Step_Counter_Thread_e19fe5af_ab4f_4bf6_b1ce_bff559c4e78f()
  global Calib_1=p[-0.11528031878663234,-0.3763547471704689,-0.047015739610847,2.247767499876802,2.1911319247734866,-3.2734924534718025E-5]
  global Calib_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Calib_cr20_fisa=p[-0.09629267160181425,-0.3037211103403046,0.0012706185507835347,2.1871519253730924,-2.2532626720084505,0.011419291581854356]
  global Ligne_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Ligne_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Ligne_3=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_4=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_9=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global test_camera=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: DornerConveyor, 1.0.0, Advanced Motion - Controls
  #   Type: Dorner Conveyor
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
  #   Type: Pr. Ã  vide
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
  
      sleep(0.008)
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sleep(0.008)
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]):
      return 0
    end
  
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    return stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[rq_socket_to_index(gripper_socket)])):
      sleep(0.008)
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_suction_complete(gripper_socket="1"):
      remaining_retries = 50
  
       # Wait for suction started
      while (not rq_is_vacuum_obj_in_suction(gripper_socket) and
             not rq_is_vacuum_obj_detected(gripper_socket) and
             remaining_retries > 0):
          sleep(0.01)
          remaining_retries = remaining_retries - 1
      end
  
      # Wait for suction completed
      while (rq_is_vacuum_obj_in_suction(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.01)
      end
  
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_obj_in_suction(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
  
      if(is_vacuum_OBJ_object_in_motion(gOBJ)):
          return True
      else:
          return False
      end
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
      sleep(0.008)
  
      if(gFLT ==6):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_in_motion(gOBJ):
      if (gOBJ == 0):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_detected(gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_secured(gOBJ):
      if (gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      rq_set_pos_spd_for(pressure, timeout, minimum, gripper_socket)
  end
  
  def is_FLT_vacuum_timeout(gFLT):
    if (gFLT == 6):
        return True
    end
  
    return False
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
    rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
    if advanced_mode:
      rq_set_gripper_mode(1, gripper_socket)
    else:
      rq_set_gripper_mode(0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      while (rq_is_vacuum_obj_detected(gripper_socket)):
        rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
        if advanced_mode:
          rq_set_gripper_mode(1, gripper_socket)
        else:
          rq_set_gripper_mode(0, gripper_socket)
        end
  
        rq_set_GTO_and_wait(1, gripper_socket)
        sleep(0.01)
      end
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket)
    if wait_for_object_detected:
          suction_completed = rq_wait_for_vacuum_object_suction_complete(gripper_socket)
          if(not suction_completed):
              rq_set_var("GTO", 0, gripper_socket)
          end
    end
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
    if advanced_mode:
      rq_set_gripper_mode(1, gripper_socket)
    else:
      rq_set_gripper_mode(0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(not is_FLT_no_fault(gFLT)):
          if(is_FLT_vacuum_timeout(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
          elif(is_FLT_faulted(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
              rq_set_var("ACT", 1, gripper_socket)
          end
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var("ACT", 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "VÃ©rifier prise"
  vacuumGripCheckWarningMessage = "Objet perdu en pr. Ã  vide"
  vacuumGripTimeoutTitle = "Erreur de pr. Ã  vide"
  vacuumGripTimeoutMessage = "DÃ©lai de prise expirÃ©"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
  #   Type: CamÃ©ra
  
  ###########################################
  #######Vision urcap preamble start########
  
  logging_service = rpc_factory("xmlrpc","http://127.0.0.1:4747")
  # Converts a pose relative to the flange in the base frame.
  def get_T_in_base_from_flange(T_x_in_flange):
  
    T_flange_in_base = get_actual_tool_flange_pose()
  
    T_x_in_base = pose_trans(T_flange_in_base, T_x_in_flange)
  
    return T_x_in_base
  end
  
  # Search pose cartesian (camera pose)
  T_camera_in_flange = p[0.0, 0.05, 0.05, -0.5, 0.0, 0.0]
  snapshot_position_offset = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  ignore_snapshot_position = False
  canSaveImage = False
  
  # Open connection with vision service
  xmlrpc_server=rpc_factory("xmlrpc","http://127.0.0.1:4242")
  
  # Open connection with visual offset monitor
  cam_locate_monitor=rpc_factory("xmlrpc","http://127.0.0.1:35919")
  
  # Open connection with visual offset monitor
  visual_offset_monitor=rpc_factory("xmlrpc","http://127.0.0.1:45841")
  
  #######Vision urcap preamble end##########
  ###########################################
  
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
  #   Type: Main
  rq_gripper_socket_ip_address = "127.0.0.1"
  rq_gripper_socket_port = 63352
  
  rq_comm_check_fail_counter = [0, 0, 0, 0]
  
  rq_read_act = [-1, -1, -1, -1]
  rq_read_gto = [-1, -1, -1, -1]
  rq_read_for = [-1, -1, -1, -1]
  rq_read_spe = [-1, -1, -1, -1]
  rq_read_obj = [-1, -1, -1, -1]
  rq_read_sta = [-1, -1, -1, -1]
  rq_read_flt = [-1, -1, -1, -1]
  rq_read_pos = [-1, -1, -1, -1]
  rq_read_pre = [-1, -1, -1, -1]
  rq_read_lbp = [-1, -1, -1, -1]
  rq_read_lrd = [-1, -1, -1, -1]
  rq_read_lbl = [-1, -1, -1, -1]
  rq_read_lgn = [-1, -1, -1, -1]
  rq_read_msc = [-1, -1, -1, -1]
  rq_read_mod = [-1, -1, -1, -1]
  rq_read_cou = [-1, -1, -1, -1]
  rq_read_ncy = [-1, -1, -1, -1]
  rq_read_dst = [-1, -1, -1, -1]
  rq_read_pco = [-1, -1, -1, -1]
  
  rq_string_initial_value = "N/A"
  
  rq_read_snu_1 = rq_string_initial_value
  rq_read_snu_2 = rq_string_initial_value
  rq_read_snu_3 = rq_string_initial_value
  rq_read_snu_4 = rq_string_initial_value
  
  rq_read_fwv_1 = rq_string_initial_value
  rq_read_fwv_2 = rq_string_initial_value
  rq_read_fwv_3 = rq_string_initial_value
  rq_read_fwv_4 = rq_string_initial_value
  
  rq_read_ver_1 = rq_string_initial_value
  rq_read_ver_2 = rq_string_initial_value
  rq_read_ver_3 = rq_string_initial_value
  rq_read_ver_4 = rq_string_initial_value
  
  rq_read_act_req = [True, True, True, True]
  rq_read_gto_req = [True, True, True, True]
  rq_read_for_req = [True, True, True, True]
  rq_read_spe_req = [True, True, True, True]
  rq_read_obj_req = [True, True, True, True]
  rq_read_sta_req = [True, True, True, True]
  rq_read_flt_req = [True, True, True, True]
  rq_read_pos_req = [True, True, True, True]
  rq_read_pre_req = [True, True, True, True]
  rq_read_lbp_req = [True, True, True, True]
  rq_read_lrd_req = [True, True, True, True]
  rq_read_lbl_req = [True, True, True, True]
  rq_read_lgn_req = [True, True, True, True]
  rq_read_msc_req = [True, True, True, True]
  rq_read_mod_req = [True, True, True, True]
  rq_read_cou_req = [True, True, True, True]
  rq_read_ncy_req = [True, True, True, True]
  rq_read_dst_req = [True, True, True, True]
  rq_read_pco_req = [True, True, True, True]
  
  rq_read_snu_1_req = False
  rq_read_snu_2_req = False
  rq_read_snu_3_req = False
  rq_read_snu_4_req = False
  
  rq_read_fwv_1_req = False
  rq_read_fwv_2_req = False
  rq_read_fwv_3_req = False
  rq_read_fwv_4_req = False
  
  rq_read_ver_1_req = False
  rq_read_ver_2_req = False
  rq_read_ver_3_req = False
  rq_read_ver_4_req = False
  
  rq_write_act_request = [False, False, False, False]
  rq_write_gto_request = [False, False, False, False]
  rq_write_atr_request = [False, False, False, False]
  rq_write_ard_request = [False, False, False, False]
  rq_write_pos_request = [False, False, False, False]
  rq_write_lbp_request = [False, False, False, False]
  rq_write_lrd_request = [False, False, False, False]
  rq_write_lbl_request = [False, False, False, False]
  rq_write_lgn_request = [False, False, False, False]
  rq_write_msc_request = [False, False, False, False]
  rq_write_mod_request = [False, False, False, False]
  
  rq_write_act = [-1, -1, -1, -1]
  rq_write_gto = [-1, -1, -1, -1]
  rq_write_atr = [-1, -1, -1, -1]
  rq_write_ard = [-1, -1, -1, -1]
  rq_write_for = [-1, -1, -1, -1]
  rq_write_spe = [-1, -1, -1, -1]
  rq_write_pos = [-1, -1, -1, -1]
  rq_write_lbp = [-1, -1, -1, -1]
  rq_write_lrd = [-1, -1, -1, -1]
  rq_write_lbl = [-1, -1, -1, -1]
  rq_write_lgn = [-1, -1, -1, -1]
  rq_write_msc = [-1, -1, -1, -1]
  rq_write_mod = [-1, -1, -1, -1]
  
  rq_write_act_previous = rq_write_act
  rq_write_gto_previous = rq_write_gto
  rq_write_atr_previous = rq_write_atr
  rq_write_ard_previous = rq_write_ard
  rq_write_for_previous = rq_write_for
  rq_write_spe_previous = rq_write_spe
  rq_write_pos_previous = rq_write_pos
  rq_write_lbp_previous = rq_write_lbp
  rq_write_lrd_previous = rq_write_lrd
  rq_write_lbl_previous = rq_write_lbl
  rq_write_lgn_previous = rq_write_lgn
  rq_write_msc_previous = rq_write_msc
  rq_write_mod_previous = rq_write_mod
  
  gripper_connected = [False, False, False, False]
  gripper_socket_open = [False, False, False, False]
  rq_comm_clear_socket_buffer_enabled = [True, True, True, True]
  rq_comm_check_counter = 0
  rq_gripper_communication_thread_started = False
  
  thread rq_gripper_communication():
      rq_comm_read_constants()
      rq_comm_read_variables()
      rq_comm_initialize_write_values()
  
      while(True):
          rq_comm_clear_socket_buffer()
          rq_comm_check()
          rq_comm_read_variables()
          rq_comm_write_variables()
  
          rq_gripper_communication_thread_started = True
          sleep(0.008)
      end
  end
  
  def rq_socket_to_index(gripper_socket="1"):
      # Patch in case gripper_socket is an integer
      gripper_socket_string = str_cat("", gripper_socket)
  
      if(gripper_socket_string == "1"):
          return 0
      elif(gripper_socket_string == "2"):
          return 1
      elif(gripper_socket_string == "3"):
          return 2
      elif(gripper_socket_string == "4"):
          return 3
      end
      return 0
  end
  
  def rq_index_to_socket(index=0):
      if(index == 0):
          return "1"
      elif(index == 1):
          return "2"
      elif(index == 2):
          return "3"
      elif(index == 3):
          return "4"
      end
      return "1"
  end
  
  def rq_comm_check():
      index = 0
      rq_comm_check_fail_counter_max = 99999
  
      if(rq_comm_check_counter < 50):
          rq_comm_check_counter = rq_comm_check_counter + 1
      else:
          rq_comm_check_counter = 0
  
          while(index <= 3):
              socket = rq_index_to_socket(index)
  
              if(gripper_connected[index]):
                  # Patch in case gripper_socket is an integer
                  gripper_socket_string = str_cat("", socket)
  
                  sid_list = rq_get_sid(socket)
                  is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
                  if(is_gripper_in_sid_list):
                      rq_comm_check_fail_counter[index] = 0
                  else:
                      rq_comm_check_fail_counter[index] = rq_comm_check_fail_counter[index] + 1
                  end
  
                  if(rq_comm_check_fail_counter[index] > rq_comm_check_fail_counter_max):
                      message = str_cat("Communication lost with Robotiq's Gripper Slave ID ", gripper_socket_string)
                      popup(message, "Communication Error", False, True, True)
                  end
              end
              index = index + 1
          end
      end
  end
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      socket_sid_set = rq_set_sid(gripper_sid, gripper_socket)
  
      if(socket_sid_set):
          # Patch in case gripper_socket is an integer
          gripper_socket_string = str_cat("", gripper_socket)
  
          sid_list = rq_get_sid(gripper_socket)
          is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
          if(is_gripper_in_sid_list):
              rq_set_gripper_connected(gripper_socket_string)
              return True
          end
      end
  
      return False
  end
  
  def open_gripper_socket(gripper_socket="1"):
      is_open = socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
      set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def rq_close_gripper_socket(gripper_socket="1"):
      socket_close(gripper_socket)
      set_gripper_socket_open(gripper_socket, False)
      rq_set_gripper_connected(gripper_socket, False)
  end
  
  
  def is_gripper_socket_open(gripper_socket="1"):
      return gripper_socket_open[rq_socket_to_index(gripper_socket)]
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
      gripper_socket_open[rq_socket_to_index(gripper_socket)] = is_open
  end
  
  def rq_set_gripper_connected(gripper_socket="1", connected = True):
      gripper_connected[rq_socket_to_index(gripper_socket)] = connected
  end
  
  def rq_is_gripper_connected(gripper_id="1"):
      return gripper_connected[rq_socket_to_index(gripper_id)]
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sid_list = socket_read_byte_list(17, gripper_socket)
      return sid_list
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
  
      remainingRetries = 2000
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      return is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected
  end
  
  def rq_is_gripper_ascii_in_sid_list(gripper_ascii_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      return sid1 == gripper_ascii_sid or sid2 == gripper_ascii_sid or sid3 == gripper_ascii_sid or sid4 == gripper_ascii_sid
  end
  
  def rq_is_gripper_in_sid_list(gripper_socket_string, sid_list):
      if(gripper_socket_string == "1"):
          return rq_is_gripper1_in_sid_list(sid_list)
      elif(gripper_socket_string == "2"):
          return rq_is_gripper2_in_sid_list(sid_list)
      elif(gripper_socket_string == "3"):
          return rq_is_gripper3_in_sid_list(sid_list)
      elif(gripper_socket_string == "4"):
          return rq_is_gripper4_in_sid_list(sid_list)
      end
      return False
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_ascii_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_ascii_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_ascii_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_ascii_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_comm_clear_socket_buffer():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index] and rq_comm_clear_socket_buffer_enabled[index]):
              byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              while(byte_in_buffer[0] >= 1):
                  byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              end
              rq_comm_clear_socket_buffer_enabled[index] = False
          end
          index = index + 1
      end
  end
  
  def rq_comm_initialize_write_values():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act[index] = rq_read_act[index]
                  rq_write_act_previous[index] = rq_read_act[index]
              elif(rq_write_act_previous[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act_previous[index] = rq_read_act[index]
              end
  
              if(rq_write_gto[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto[index] = rq_read_gto[index]
                  rq_write_gto_previous[index] = rq_read_gto[index]
              elif(rq_write_gto_previous[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto_previous[index] = rq_read_gto[index]
              end
  
              if(rq_write_for[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for[index] = rq_read_for[index]
                  rq_write_for_previous[index] = rq_read_for[index]
              elif(rq_write_for_previous[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for_previous[index] = rq_read_for[index]
              end
  
              if(rq_write_spe[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe[index] = rq_read_spe[index]
                  rq_write_spe_previous[index] = rq_read_spe[index]
              elif(rq_write_spe_previous[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe_previous[index] = rq_read_spe[index]
              end
  
              if(rq_write_pos[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos[index] = rq_read_pos[index]
                  rq_write_pos_previous[index] = rq_read_pos[index]
              elif(rq_write_pos_previous[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos_previous[index] = rq_read_pos[index]
              end
  
              if(rq_write_lbp[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp[index] = rq_read_lbp[index]
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              elif(rq_write_lbp_previous[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              end
  
              if(rq_write_lrd[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd[index] = rq_read_lrd[index]
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              elif(rq_write_lrd_previous[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              end
  
              if(rq_write_lbl[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl[index] = rq_read_lbl[index]
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              elif(rq_write_lbl_previous[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              end
  
              if(rq_write_lgn[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn[index] = rq_read_lgn[index]
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              elif(rq_write_lgn_previous[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              end
  
              if(rq_write_msc[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc[index] = rq_read_msc[index]
                  rq_write_msc_previous[index] = rq_read_msc[index]
              elif(rq_write_msc_previous[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc_previous[index] = rq_read_msc[index]
              end
  
              if(rq_write_mod[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod[index] = rq_read_mod[index]
                  rq_write_mod_previous[index] = rq_read_mod[index]
              elif(rq_write_mod_previous[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod_previous[index] = rq_read_mod[index]
              end
  
          end
          index = index + 1
      end
  end
  
  def rq_comm_set_var(var, value=0, gripper_socket="1"):
      socket_set_var(var, value, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_set_pos_spe_for(pos=0, speed=0, force=0, gripper_socket="1"):
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_read_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_read_act_req[index]):
                  rq_read_act[index] = socket_get_var("ACT", socket)
                  rq_read_act_req[index] = False
              end
  
              if(rq_read_gto_req[index]):
                  rq_read_gto[index] = socket_get_var("GTO", socket)
                  rq_read_gto_req[index] = False
              end
  
              if(rq_read_pre_req[index]):
                  rq_read_pre[index] = socket_get_var("PRE", socket)
                  rq_read_pre_req[index] = False
              end
  
              if(rq_read_pos_req[index]):
                  rq_read_pos[index] = socket_get_var("POS", socket)
                  rq_read_pos_req[index] = False
              end
  
              if(rq_read_spe_req[index]):
                  rq_read_spe[index] = socket_get_var("SPE", socket)
                  rq_read_spe_req[index] = False
              end
  
              if(rq_read_for_req[index]):
                  rq_read_for[index] = socket_get_var("FOR", socket)
                  rq_read_for_req[index] = False
              end
  
              if(rq_read_obj_req[index]):
                  rq_read_obj[index] = socket_get_var("OBJ", socket)
                  rq_read_obj_req[index] = False
              end
  
              if(rq_read_sta_req[index]):
                  rq_read_sta[index] = socket_get_var("STA", socket)
                  rq_read_sta_req[index] = False
              end
  
              if(rq_read_mod_req[index]):
                  rq_read_mod[index] = socket_get_var("MOD", socket)
                  rq_read_mod_req[index] = False
              end
  
              if(rq_read_flt_req[index]):
                  rq_read_flt[index] = socket_get_var("FLT",socket)
                  rq_read_flt_req[index] = False
              end
  
              if(rq_read_lbp_req[index]):
                  rq_read_lbp[index] = socket_get_var("LBP", socket)
                  rq_read_lbp_req[index] = False
              end
  
              if(rq_read_lrd_req[index]):
                  rq_read_lrd[index] = socket_get_var("LRD", socket)
                  rq_read_lrd_req[index] = False
              end
  
              if(rq_read_lbl_req[index]):
                  rq_read_lbl[index] = socket_get_var("LBL",socket)
                  rq_read_lbl_req[index] = False
              end
  
              if(rq_read_lgn_req[index]):
                  rq_read_lgn[index] = socket_get_var("LGN", socket)
                  rq_read_lgn_req[index] = False
              end
  
              if(rq_read_msc_req[index]):
                  rq_read_msc[index] = socket_get_var("MSC", socket)
                  rq_read_msc_req[index] = False
              end
  
              if(rq_read_cou_req[index]):
                  rq_read_cou[index] = socket_get_var("COU", socket)
                  rq_read_cou_req[index] = False
              end
  
              if(rq_read_ncy_req[index]):
                  rq_read_ncy[index] = socket_get_var("NCY", socket)
                  rq_read_ncy_req[index] = False
              end
  
              if(rq_read_dst_req[index]):
                  rq_read_dst[index] = socket_get_var("DST", socket)
                  rq_read_dst_req[index] = False
              end
  
              if(rq_read_pco_req[index]):
                  rq_read_pco[index] = socket_get_var("PCO", socket)
                  rq_read_pco_req[index] = False
              end
          end
          index = index + 1
      end
  end
  
  def rq_comm_read_constants():
  
      if(gripper_connected[0]):
          while(rq_read_snu_1 == rq_string_initial_value):
              socket_send_string("GET SNU", "1")
              rq_read_snu_1 = socket_read_string("1")
          end
  
          while(rq_read_fwv_1 == rq_string_initial_value):
              socket_send_string("GET FWV", "1")
              rq_read_fwv_1 = socket_read_string("1")
          end
  
          while(rq_read_ver_1 == rq_string_initial_value):
              socket_send_string("GET VER", "1")
              rq_read_ver_1 = socket_read_string("1")
          end
      end
  
      if(gripper_connected[1]):
          while(rq_read_snu_2 == rq_string_initial_value):
              socket_send_string("GET SNU", "2")
              rq_read_snu_2 = socket_read_string("2")
          end
  
          while(rq_read_fwv_2 == rq_string_initial_value):
              socket_send_string("GET FWV", "2")
              rq_read_fwv_2 = socket_read_string("2")
          end
  
          while(rq_read_ver_2 == rq_string_initial_value):
              socket_send_string("GET VER", "2")
              rq_read_ver_2 = socket_read_string("2")
          end
      end
  
      if(gripper_connected[2]):
          while(rq_read_snu_3 == rq_string_initial_value):
              socket_send_string("GET SNU", "3")
              rq_read_snu_3 = socket_read_string("3")
          end
  
          while(rq_read_fwv_3 == rq_string_initial_value):
              socket_send_string("GET FWV", "3")
              rq_read_fwv_3 = socket_read_string("3")
          end
  
          while(rq_read_ver_3 == rq_string_initial_value):
              socket_send_string("GET VER", "3")
              rq_read_ver_3 = socket_read_string("3")
          end
      end
  
      if(gripper_connected[3]):
          while(rq_read_snu_4 == rq_string_initial_value):
              socket_send_string("GET SNU", "4")
              rq_read_snu_4 = socket_read_string("4")
          end
  
          while(rq_read_fwv_4 == rq_string_initial_value):
              socket_send_string("GET FWV", "4")
              rq_read_fwv_4 = socket_read_string("4")
          end
  
          while(rq_read_ver_4 == rq_string_initial_value):
              socket_send_string("GET VER", "4")
              rq_read_ver_4 = socket_read_string("4")
          end
      end
  end
  
  def rq_comm_write_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act_request[index]):
                  if(is_ack(rq_comm_set_var("ACT", rq_write_act[index], socket))):
                      rq_write_act_previous[index] = rq_write_act[index]
                      rq_write_act_request[index] = False
                  end
              end
  
              if(rq_write_gto_request[index]):
                  if(is_ack(rq_comm_set_var("GTO", rq_write_gto[index], socket))):
                      rq_write_gto_previous[index] = rq_write_gto[index]
                      rq_write_gto_request[index] = False
                  end
              end
  
              if(rq_write_atr_request[index]):
                  if(is_ack(rq_comm_set_var("ATR", rq_write_atr[index], socket))):
                      rq_write_atr_previous[index] = rq_write_atr[index]
                      rq_write_atr_request[index] = False
                  end
              end
  
              if(rq_write_ard_request[index]):
                  if(is_ack(rq_comm_set_var("ARD", rq_write_ard[index], socket))):
                      rq_write_ard_previous[index] = rq_write_ard[index]
                      rq_write_ard_request[index] = False
                  end
              end
  
              if(rq_write_pos_request[index]):
                  if(is_ack(rq_comm_set_pos_spe_for(rq_write_pos[index], rq_write_spe[index], rq_write_for[index], socket))):
                      rq_write_pos_previous[index] = rq_write_pos[index]
                      rq_write_spe_previous[index] = rq_write_spe[index]
                      rq_write_for_previous[index] = rq_write_for[index]
                      rq_write_pos_request[index] = False
                  end
              end
  
              if(rq_write_lbp_request[index]):
                  if(is_ack(rq_comm_set_var("LBP", rq_write_lbp[index], socket))):
                      rq_write_lbp_previous[index] = rq_write_lbp[index]
                      rq_write_lbp_request[index] = False
                  end
              end
  
              if(rq_write_lrd_request[index]):
                  if(is_ack(rq_comm_set_var("LRD", rq_write_lrd[index], socket))):
                      rq_write_lrd_previous[index] = rq_write_lrd[index]
                      rq_write_lrd_request[index] = False
                  end
              end
  
              if(rq_write_lbl_request[index]):
                  if(is_ack(rq_comm_set_var("LBL", rq_write_lbl[index], socket))):
                      rq_write_lbl_previous[index] = rq_write_lbl[index]
                      rq_write_lbl_request[index] = False
                  end
              end
  
              if(rq_write_lgn_request[index]):
                  if(is_ack(rq_comm_set_var("LGN", rq_write_lgn[index], socket))):
                      rq_write_lgn_previous[index] = rq_write_lgn[index]
                      rq_write_lgn_request[index] = False
                  end
              end
  
              if(rq_write_msc_request[index]):
                  if(is_ack(rq_comm_set_var("MSC", rq_write_msc[index], socket))):
                      rq_write_msc_previous[index] = rq_write_msc[index]
                      rq_write_msc_request[index] = False
                  end
              end
  
              if(rq_write_mod_request[index]):
                  if(is_ack(rq_comm_set_var("MOD", rq_write_mod[index], socket))):
                      rq_write_mod_previous[index] = rq_write_mod[index]
                      rq_write_mod_request[index] = False
                  end
              end
          end
          index = index + 1
      end
  end
  
  def rq_activate(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_reset(gripper_socket)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
              rq_reset(gripper_socket)
              sleep(0.008)
          end
  
          rq_set_var("ACT",1, gripper_socket)
      end
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_activate(gripper_socket)
          sleep(1.0)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 1 or not rq_get_var("STA", 1, gripper_socket) == 3):
              sleep(0.1)
          end
  
          sleep(0.5)
      end
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_connected[0]):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_connected[1]):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_connected[2]):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_connected[3]):
          rq_reset_and_activate("4", reset)
      end
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_reset(gripper_socket="1"):
      rq_set_var("ACT", 0, gripper_socket)
      rq_set_var("ATR", 0, gripper_socket)
  
      while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
          rq_set_var("ACT", 0, gripper_socket)
          rq_set_var("ATR", 0, gripper_socket)
          sleep(0.008)
      end
  
      sleep(0.5)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",0, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",1, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      remainingRetries = 20
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  
      remainingRetries = 100
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var("FOR", force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var("SPE", speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_var("POS", pos, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_pos_spe_for_request(pos, speed, force, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          sleep(0.008)
          # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
          # the communication driver reset the GTO bit
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          sleep(0.008)
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var("POS", pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
  
      rq_set_var("MSC", current, gripper_socket)
      current_read = rq_get_var("MSC", 1, gripper_socket)
  
      while(current_read != current):
          rq_set_var("MSC", current, gripper_socket)
          current_read = rq_get_var("MSC", 1, gripper_socket)
      end
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var("MOD", mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      current = rq_get_var("MSC", 1, gripper_socket)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_set_max_current_for_all_grippers():
      current_mA = rq_get_max_current_mA()
  
      if(gripper_connected[0]):
          rq_set_gripper_max_current_mA(current_mA, "1")
      end
  
      if(gripper_connected[1]):
          rq_set_gripper_max_current_mA(current_mA, "2")
      end
  
      if(gripper_connected[2]):
          rq_set_gripper_max_current_mA(current_mA, "3")
      end
  
      if(gripper_connected[3]):
          rq_set_gripper_max_current_mA(current_mA, "4")
      end
  end
  
  def rq_get_max_current_mA():
      max_current_mA = 0
  
      if(rq_current_limit_enabled):
          nb_connected_grippers = rq_get_nb_connected_grippers()
  
          if(nb_connected_grippers == 1):
              max_current_mA = 600
          elif(nb_connected_grippers > 1):
              max_current_mA = 450
          end
      else:
  
      end
  
      return max_current_mA
  end
  
  def rq_get_nb_connected_grippers():
      nb_connected_grippers = 0
  
      if(gripper_connected[0]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[1]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[2]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[3]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      return nb_connected_grippers
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_gripper_at_position(gOBJ) or is_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var("STA", 1, gripper_socket)
      sleep(0.008)
      return is_STA_gripper_activated(gSTA)
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_object_detected(gOBJ)
  end
  
  def rq_current_pos(gripper_socket="1"):
      gPOS = rq_get_var("POS", 1, gripper_socket)
      sleep(0.008)
      return gPOS
  end
  
  def rq_motor_current(gripper_socket="1"):
      rq_current = rq_get_var("COU", 1, gripper_socket)
      sleep(0.008)
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_connected[0]):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_connected[1]):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_connected[2]):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_connected[3]):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      num_cycles = rq_get_var("NCY", 1, gripper_socket)
  
      if(num_cycles == -1):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", num_cycles)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      driver_state = rq_get_var("DST", 1, gripper_socket)
  
      if(driver_state == 0):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(driver_state == 1):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(driver_state == 2):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(driver_state == 3):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      serial_number = rq_get_var_string("SNU", 1, gripper_socket)
      textmsg("Gripper Serial Number : ", serial_number)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      firmware_version = rq_get_var_string("FWV", 1, gripper_socket)
      textmsg("Gripper Firmware Version : ", firmware_version)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      driver_version = rq_get_var_string("VER", 1, gripper_socket)
      textmsg("Gripper Driver Version : ", driver_version)
  end
  
  def rq_print_gripper_connection_state(gripper_socket="1"):
      connection_state = rq_get_var("PCO", 1, gripper_socket)
  
      if (connection_state == 0):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (gSTA):
      if (gSTA == 3):
          return True
      end
  
      return False
  end
  
  def is_OBJ_object_detected (gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_OBJ_gripper_at_position (gOBJ):
      if (gOBJ == 3):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (gOBJ):
      if (is_OBJ_gripper_at_position(gOBJ)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var("GTO", 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var("GTO" ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var("GTO", 1, gripper_socket))):
        sleep(0.008)
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var("GTO", 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, rGTO):
      return rGTO == goto_value
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(gFLT):
      return gFLT == 0
  end
  
  def is_FLT_warning(gFLT):
      return gFLT >= 1 and gFLT <= 7
  end
  
  def is_FLT_faulted(gFLT):
      return gFLT >= 8
  end
  
  def is_FLT_action_delayed(gFLT):
      return gFLT == 5
  end
  
  def is_FLT_not_activated(gFLT):
      return gFLT == 7
  end
  
  def is_FLT_autorelease_in_progress(gFLT):
      return gFLT == 11
  end
  
  def is_FLT_overcurrent(gFLT):
      return gFLT == 14
  end
  
  def is_FLT_autorelease_completed(gFLT):
      return gFLT == 15
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      if (var_name == "ACT"):
          rq_write_act[index] = var_value
          rq_write_act_request[index] = True
      elif (var_name == "GTO"):
          rq_write_gto[index] = var_value
          rq_write_gto_request[index] = True
      elif (var_name == "ATR"):
          rq_write_atr[index] = var_value
          rq_write_atr_request[index] = True
      elif (var_name == "ARD"):
          rq_write_ard[index] = var_value
          rq_write_ard_request[index] = True
      elif (var_name == "FOR"):
          rq_write_for[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "SPE"):
          rq_write_spe[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "POS"):
          rq_write_pos[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "LBP"):
          rq_write_lbp[index] = var_value
          rq_write_lbp_request[index] = True
      elif (var_name == "LRD"):
          rq_write_lrd[index] = var_value
          rq_write_lrd_request[index] = True
      elif (var_name == "LBL"):
          rq_write_lbl[index] = var_value
          rq_write_lbl_request[index] = True
      elif (var_name == "LGN"):
          rq_write_lgn[index] = var_value
          rq_write_lgn_request[index] = True
      elif (var_name == "MSC"):
          rq_write_msc[index] = var_value
          rq_write_msc_request[index] = True
      elif (var_name == "MOD"):
          rq_write_mod[index] = var_value
          rq_write_mod_request[index] = True
      end
  
      exit_critical
  
      if (var_name == "ACT"):
          while(rq_write_act_request[index]):
              sleep(0.008)
          end
      elif (var_name == "GTO"):
          while(rq_write_gto_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ATR"):
          while(rq_write_atr_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ARD"):
          while(rq_write_ard_request[index]):
              sleep(0.008)
          end
      elif (var_name == "FOR"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "SPE"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "POS"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBP"):
          while(rq_write_lbp_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LRD"):
          while(rq_write_lrd_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBL"):
          while(rq_write_lbl_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LGN"):
          while(rq_write_lgn_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MSC"):
          while(rq_write_msc_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MOD"):
          while(rq_write_mod_request[index]):
              sleep(0.008)
          end
      end
  end
  
  def rq_set_pos_spe_for_var(pos, speed, force, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      rq_write_for[index] = force
      rq_write_spe[index] = speed
      rq_write_pos[index] = pos
      rq_write_pos_request[index] = True
  
      exit_critical
  end
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = -1
  
      if (var_name == "ACT"):
          enter_critical
          rq_read_act_req[index] = True
          exit_critical
          while(rq_read_act_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_act[index]
  
      elif (var_name == "GTO"):
          enter_critical
          rq_read_gto_req[index] = True
          exit_critical
          while(rq_read_gto_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_gto[index]
  
      elif (var_name == "FOR"):
          enter_critical
          rq_read_for_req[index] = True
          exit_critical
          while(rq_read_for_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_for[index]
  
      elif (var_name == "SPE"):
          enter_critical
          rq_read_spe_req[index] = True
          exit_critical
          while(rq_read_spe_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_spe[index]
  
      elif (var_name == "OBJ"):
          enter_critical
          rq_read_obj_req[index] = True
          exit_critical
          while(rq_read_obj_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_obj[index]
  
      elif (var_name == "STA"):
          enter_critical
          rq_read_sta_req[index] = True
          exit_critical
          while(rq_read_sta_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_sta[index]
  
      elif (var_name == "FLT"):
          enter_critical
          rq_read_flt_req[index] = True
          exit_critical
          while(rq_read_flt_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_flt[index]
  
      elif (var_name == "POS"):
          enter_critical
          rq_read_pos_req[index] = True
          exit_critical
          while(rq_read_pos_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pos[index]
  
      elif (var_name == "PRE"):
          enter_critical
          rq_read_pre_req[index] = True
          exit_critical
          while(rq_read_pre_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pre[index]
  
      elif (var_name == "LBP"):
          enter_critical
          rq_read_lbp_req[index] = True
          exit_critical
          while(rq_read_lbp_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbp[index]
  
      elif (var_name == "LRD"):
          enter_critical
          rq_read_lrd_req[index] = True
          exit_critical
          while(rq_read_lrd_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lrd[index]
  
      elif (var_name == "LBL"):
          enter_critical
          rq_read_lbl_req[index] = True
          exit_critical
          while(rq_read_lbl_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbl[index]
  
      elif (var_name == "LGN"):
          enter_critical
          rq_read_lgn_req[index] = True
          exit_critical
          while(rq_read_lgn_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lgn[index]
  
      elif (var_name == "MSC"):
          enter_critical
          rq_read_msc_req[index] = True
          exit_critical
          while(rq_read_msc_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_msc[index]
  
      elif (var_name == "MOD"):
          enter_critical
          rq_read_mod_req[index] = True
          exit_critical
          while(rq_read_mod_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_mod[index]
  
      elif (var_name == "NCY"):
          enter_critical
          rq_read_ncy_req[index] = True
          exit_critical
          while(rq_read_ncy_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_ncy[index]
  
      elif (var_name == "PCO"):
          enter_critical
          rq_read_pco_req[index] = True
          exit_critical
          while(rq_read_pco_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pco[index]
  
      elif (var_name == "DST"):
          enter_critical
          rq_read_dst_req[index] = True
          exit_critical
          while(rq_read_dst_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_dst[index]
  
      end
  
      return var_value
  end
  
  def rq_get_var_string(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = ""
  
      enter_critical
  
      if (var_name == "SNU"):
          if(gripper_socket == "1"):
              var_value = rq_read_snu_1
          elif(gripper_socket == "2"):
              var_value = rq_read_snu_2
          elif(gripper_socket == "3"):
              var_value = rq_read_snu_3
          elif(gripper_socket == "4"):
              var_value = rq_read_snu_4
          end
      elif (var_name == "FWV"):
          if(gripper_socket == "1"):
              var_value = rq_read_fwv_1
          elif(gripper_socket == "2"):
              var_value = rq_read_fwv_2
          elif(gripper_socket == "3"):
              var_value = rq_read_fwv_3
          elif(gripper_socket == "4"):
              var_value = rq_read_fwv_4
          end
      elif (var_name == "VER"):
          if(gripper_socket == "1"):
              var_value = rq_read_ver_1
          elif(gripper_socket == "2"):
              var_value = rq_read_ver_2
          elif(gripper_socket == "3"):
              var_value = rq_read_ver_3
          elif(gripper_socket == "4"):
              var_value = rq_read_ver_4
          end
      end
  
      exit_critical
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var("LBP",0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
      rq_comm_clear_socket_buffer_enabled[rq_socket_to_index(gripper_socket)] = True
  end
  
  def rq_gripper_id_to_ascii(gripper_id):
      if(gripper_id == "1"):
          return 57
      elif(gripper_id == "2"):
          return 50
      elif(gripper_id == "3"):
          return 51
      elif(gripper_id == "4"):
          return 52
      end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_current_limit_enabled = True
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  # end: URCap Installation Node
  global PointPassage_1_p=p[-.362873177004, .121551096050, .330941266413, -1.918845660908, 1.961942396300, -.486103728791]
  global PointPassage_1_q=[-3.120444361363546, -2.190470357934469, -0.4490342140197754, -2.5690742931761683, 1.5774974822998047, -3.0931556860553187]
  global PointPassage_2_p=p[-.430970440922, .076893503745, .201714451258, 2.069777715833, -2.094304874555, -.190462416556]
  global PointPassage_2_q=[-3.0220213572131556, -2.0909859142699183, -1.4921698570251465, -0.8982003492167969, 1.5810532569885254, -3.0030773321734827]
  global PointPassage_3_p=p[-.429321934580, .068203753900, .145923528034, 1.880458298387, -1.932184921476, -.530917011193]
  global PointPassage_3_q=[-2.9783526102649134, -2.2457691631712855, -1.7559762001037598, -0.16411574304614263, 1.4805092811584473, -2.972081009541647]
  global PointPassage_7_p=p[-.413816994145, .070661727795, .198377931330, 1.911470629384, -1.957587180436, -.503863202145]
  global PointPassage_7_q=[-2.9784603754626673, -2.036525388757223, -1.7713236808776855, -0.3998893064311524, 1.4807014465332031, -2.972081009541647]
  global PointPassage_4_p=p[-.122288422950, -.314513617337, .263532746427, 3.082147901096, -.033858666973, .015816340107]
  global PointPassage_4_q=[-1.552413288746969, -1.6206962070860804, -1.7333979606628418, -1.2977007192424317, 1.5775809288024902, -3.093071762715475]
  global PointPassage_5_p=p[-.134792787253, -.328517898994, .152428844670, -2.205154882970, 2.208931725488, -.051030693949]
  global PointPassage_5_q=[-1.5989936033831995, -1.9146200619139613, -1.926750659942627, -0.8617208761027833, 1.6050972938537598, -1.5898025671588343]
  global retour_securise_p=p[-.134176244380, -.179969067699, .442128087003, -2.247065422965, -2.169715776188, .049563268488]
  global retour_securise_q=[-1.580867115651266, -1.313999966984131, -1.077836513519287, -2.310045381585592, 1.5361785888671875, -4.679569069539205]
  global Waypoint_1_p=p[-.133008185677, -.272417554966, .432242547382, -3.022504056832, -.033219001434, -.228849311250]
  global Waypoint_1_q=[-1.630162541066305, -1.7605964146056117, -0.6540017127990723, -2.417180200616354, 1.7114696502685547, -3.2237709204303187]
  global photo_p=p[-.130985004608, -.299301844880, .389589519127, -2.583698256694, -.177163147813, -.077157097025]
  global photo_q=[-1.5778382460223597, -2.118394514123434, -0.22243642807006836, -2.9240204296507777, 1.5847020149230957, -3.2823131720172327]
  global approche_p=p[-.127510353906, -.324344871190, .215093991470, -2.262516185847, -2.158732085134, .041751844138]
  global approche_q=[-1.5583418051349085, -1.7376233539977015, -1.8172821998596191, -1.148853139286377, 1.5394878387451172, -4.645364586506979]
  global recup_p=p[-.120620705728, -.324407536975, .153782681452, -2.205924879971, -2.216091569060, .039266066565]
  global recup_q=[-1.53699237505068, -1.8700691662230433, -1.9831385612487793, -0.8517454427531739, 1.5396676063537598, -4.675836388264791]
  global post_prise_p=p[-.119842116521, -.320202633038, .232501040146, 3.123033441017, -.140729869705, .068638990076]
  global post_prise_q=[-1.554981533681051, -1.6912228069701136, -1.7889103889465332, -1.2135961812785645, 1.6118321418762207, -3.027440849934713]
  global pro_placer_p=p[-.107300084852, -.316960138744, .388085791220, 2.253056545473, 2.136631803865, -.015279131409]
  global pro_placer_q=[-1.505503002797262, -1.6666952572264613, -1.0771565437316895, -1.9330369434752406, 1.5845346450805664, -4.586160008107321]
  global placer_p=p[.419643131508, -.190389877301, .199502543517, .040729770359, -3.115452097668, .003189002324]
  global placer_q=[-0.1400836149798792, -2.2388178310790003, -1.13511323928833, -1.3627270025065918, 1.5602312088012695, -4.872862641011373]
  global post_placer_p=p[.168877224007, -.296688700766, .383756597820, 2.102545773585, 2.274287271688, -.033610785799]
  global post_placer_q=[-0.6577637831317347, -1.6797310314574183, -1.0877537727355957, -1.9020048580565394, 1.5431571006774902, -3.8707836310016077]
  global Placer_rebus_p=p[-.499435671180, -.158135628171, .389521643448, -1.535010915663, -1.718638704627, .892137721697]
  global Placer_rebus_q=[-2.5009282271014612, -2.33583464244985, -0.589775562286377, -0.8785923284343262, 1.1007075309753418, -5.985700432454244]
  global PointPassage_6_p=p[-.341674820932, -.103086594101, .420534879064, -1.821849374586, -2.428276749171, -.031452569222]
  global PointPassage_6_q=[-2.446531120930807, -1.8634706936278285, -0.6424498558044434, -2.2020145855345667, 1.4600481986999512, -5.8648555914508265]
  while (True):
    $ 1 "Programme de robot"
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
    #   Type: Activer la main
    $ 2 "Activer la main"
    
    kill rq_gripper_communication_thread
    rq_gripper_communication_thread_started = False
    rq_close_gripper_socket("1")
    rq_close_gripper_socket("2")
    rq_close_gripper_socket("3")
    rq_close_gripper_socket("4")
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    rq_print_connected_grippers()
    rq_gripper_communication_thread = run rq_gripper_communication()
    
    while(not rq_gripper_communication_thread_started):
        sleep(0.008)
    end
    
    rq_set_max_current_for_all_grippers()
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
    #   Type: Main
    $ 3 "Ouverture main (1)"
    if not(gripper_connected[0]):
      popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
    end
    rq_set_pos_spd_for(0, 255, 255, "1")
    rq_wait_pos_spe_for_request(0, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: DornerConveyor, 1.0.0, Advanced Motion - Controls
    #   Type: Dorner Conveyor
    $ 4 "Conveyor :1,Stop"
    set_standard_digital_out(7,False)
    set_standard_digital_out(6,False)
    set_analog_outputdomain(1,1)
    set_standard_analog_out(1,0.0)
    # end: URCap Program Node
    $ 5 "DÃ©placementA"
    $ 6 "PointPassage_1" "breakAfter"
    movej(get_inverse_kin(PointPassage_1_p, qnear=PointPassage_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "PointPassage_2" "breakAfter"
    movej(get_inverse_kin(PointPassage_2_p, qnear=PointPassage_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "PointPassage_3" "breakAfter"
    movej(get_inverse_kin(PointPassage_3_p, qnear=PointPassage_3_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
    #   Type: Main
    $ 9 "DÃ©placement main58% (1)"
    if not(gripper_connected[0]):
      popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
    end
    rq_set_pos_spd_for(149, 0, 255, "1")
    rq_wait_pos_spe_for_request(149, 0, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 10 "PointPassage_7" "breakAfter"
    movej(get_inverse_kin(PointPassage_7_p, qnear=PointPassage_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 11 "PointPassage_1" "breakAfter"
    movej(get_inverse_kin(PointPassage_1_p, qnear=PointPassage_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 12 "PointPassage_4" "breakAfter"
    movej(get_inverse_kin(PointPassage_4_p, qnear=PointPassage_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "PointPassage_5" "breakAfter"
    movej(get_inverse_kin(PointPassage_5_p, qnear=PointPassage_5_q), a=0.5235987755982988, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
    #   Type: Main
    $ 14 "Ouverture main (1)"
    if not(gripper_connected[0]):
      popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
    end
    if not(rq_is_gripper_activated("1")):
      popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
    end
    rq_set_pos_spd_for(0, 0, 0, "1")
    rq_wait_pos_spe_for_request(0, 0, 0, "1")
    rq_go_to("1")
    rq_wait("1")
    # end: URCap Program Node
    $ 15 "retour_securise" "breakAfter"
    movej(get_inverse_kin(retour_securise_p, qnear=retour_securise_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 16 "Attendre digital_in[4] â True  or digital_in[5]â True "
    while (not(get_standard_digital_in(4)  ==   True    or  get_standard_digital_in(5) ==   True  )):
      sync()
    end
    $ 17 "Si digital_in[4]â True "
    if (get_standard_digital_in(4) ==   True  ):
      $ 18 "var_1â True "
      global var_1=  True  
      $ 19 "Boucle var_1â True "
      while (var_1 ==   True  ):
        $ 20 "DÃ©placementA"
        $ 21 "Waypoint_1" "breakAfter"
        movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 22 "DÃ©placementA"
        $ 23 "photo" "breakAfter"
        movej(get_inverse_kin(photo_p, qnear=photo_q), a=1.3962634015954636, v=1.0471975511965976)
        # begin: URCap Program Node
        #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
        #   Type: Localisation camÃ©ra
        $ 24 "Localisation camÃ©ra"
        
        ###########################################
        #######VisionLocate node start########
        
        f=[0,0.0,0.0,0.0,0.0,0.0,0.0,0]
        object_location=p[0.0,0.0,0.0,0.0,0.0,0.0]
        feature_pose_to_restore_50904 = Calib_2
        movej([-1.5836804548846644, -1.5576728147319336, -1.1589980125427246, -2.3950706921019496, 1.6015324592590332, -3.158562485371725])
        # Offset in translation only.
        snapshot_position_offset[3] = 0
        snapshot_position_offset[4] = 0
        snapshot_position_offset[5] = 0
        T_camera_in_flange = p[0, 0, 0, 0, 0, 0] # enlever une fois que l'enseignement du modele sera fait en faisant un movetool avec la pose de la camera dans le repere de la flange. Pour l'instant, on suppose que la camera est situee directement sur la flange.
        tool_50904 = get_T_in_base_from_flange(T_camera_in_flange)
        tool_50904 = pose_sub(tool_50904, snapshot_position_offset)
        snapshot_position = p[-0.129407, -0.233098, 0.365602, -2.74117, -0.00825141, -0.0507442]
        textmsg("expected snapshot position : ", snapshot_position)
        diff = pose_sub(tool_50904, snapshot_position)
        textmsg("diff = ", diff)
        is_at_snapshot_position = norm([diff[0], diff[1], diff[2]]) < 0.002
        is_at_snapshot_position = is_at_snapshot_position and (norm([diff[3], diff[4], diff[5]]) < 0.005)
        textmsg("is_at_snapshot_position = ", is_at_snapshot_position)
        is_snapshot_position_offset = norm(snapshot_position_offset) != 0
        is_at_snapshot_position = is_at_snapshot_position or ignore_snapshot_position
        if not(is_at_snapshot_position):
          popup("Robot is not at Snapshot Position. Add Move instruction to Snapshot Position before Camera Locate node.. Error code: [UCC-8]", warning = False, error = True)
          halt
        end
        f_50904 = xmlrpc_server.findmodel("contextName-50904", tool_50904[0], tool_50904[1], tool_50904[2], tool_50904[3], tool_50904[4], tool_50904[5])
        cam_locate_monitor.setFindModelResult("50904", f_50904)
        canSaveImage = True
        logging_service.publish("FIND_MODEL", f_50904)
        cam_locate_monitor.setCurrentObjectIndex("50904", 0)
        # begin: URCap Program Node
        #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
        #   Type: Boucle de la localisation de camÃ©ra
        $ 25 "Pour le ou les objets trouvÃ©s" "noBreak"
        object_teaching_location_50904 = p[-0.10858899682842695, -0.3298791170798341, 0.0013903307483954478, 2.186047489594667, -2.254339148656133, 0.01142036475668008]
        feature_teaching_location_50904 = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        while (not cam_locate_monitor.isCaptureNeeded("50904")):
          poseAsArray = cam_locate_monitor.getCurrentObjectPoseAsArray("50904")
          current_object_location_50904 = p[poseAsArray[0], poseAsArray[1], poseAsArray[2], poseAsArray[3], poseAsArray[4], poseAsArray[5]]
          object_location = current_object_location_50904
          f[0] = cam_locate_monitor.getNumberOfObjectsFound("50904")
          f[1] = object_location[0]
          f[2] = object_location[1]
          f[3] = object_location[2]
          f[4] = object_location[3]
          f[5] = object_location[4]
          f[6] = object_location[5]
          f[7] = cam_locate_monitor.getCurrentObjectDetectionScore("50904")
          textmsg("current_object_location = ", current_object_location_50904)
          if (norm(snapshot_position_offset) != 0):
            current_object_location_50904 = pose_add(current_object_location_50904, snapshot_position_offset)
            textmsg("current_object_location after snapshot position offset = ", current_object_location_50904)
          end
          Calib_2 = pose_trans(current_object_location_50904, pose_trans(pose_inv(object_teaching_location_50904), feature_teaching_location_50904))
          $ 26 "DÃ©placementL" "noBreak"
          $ 27 "approche" "noBreak"
          movel(pose_trans(Calib_1, pose_trans(p[.379088257553, .105726585325, -.047506941904, -2.247767499877, -2.191131924773, .000032734924], approche_p)), a=0.5079997256801482, v=0.4)
          $ 28 "recup" "noBreak"
          movel(pose_trans(Calib_1, pose_trans(p[.379088257553, .105726585325, -.047506941904, -2.247767499877, -2.191131924773, .000032734924], recup_p)), a=0.08, v=0.15)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
          #   Type: Main
          $ 29 "DÃ©placement main55% (1)" "noBreak"
          if not(gripper_connected[0]):
            popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
          end
          rq_set_pos_spd_for(140, 133, 255, "1")
          rq_wait_pos_spe_for_request(140, 133, 255, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 30 "approche" "noBreak"
          movel(pose_trans(Calib_1, pose_trans(p[.379088257553, .105726585325, -.047506941904, -2.247767499877, -2.191131924773, .000032734924], approche_p)), a=0.08, v=0.15)
          $ 31 "post_prise" "noBreak"
          movel(pose_trans(Calib_1, pose_trans(p[.162610803914, -.321046559122, -.023829538781, -3.138426557699, .092719409522, -.002867798617], post_prise_p)), a=1.2, v=0.25)
          $ 32 "var_1â False " "noBreak"
          global var_1=  False  
          $ 33 "DÃ©placementA" "noBreak"
          $ 34 "pro_placer" "noBreak"
          movej(get_inverse_kin(pro_placer_p, qnear=pro_placer_q), a=1.3962634015954636, v=1.3962634015954636)
          $ 35 "placer" "noBreak"
          movej(get_inverse_kin(placer_p, qnear=placer_q), t=2.0)
          # begin: URCap Program Node
          #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
          #   Type: Main
          $ 36 "Ouverture main (1)" "noBreak"
          if not(gripper_connected[0]):
            popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
          end
          if not(rq_is_gripper_activated("1")):
            popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
          end
          rq_set_pos_spd_for(0, 0, 0, "1")
          rq_wait_pos_spe_for_request(0, 0, 0, "1")
          rq_go_to("1")
          rq_wait("1")
          # end: URCap Program Node
          $ 37 "post_placer" "noBreak"
          movej(get_inverse_kin(post_placer_p, qnear=post_placer_q), a=1.3962634015954636, v=1.3962634015954636)
          $ 38 "Boucle digital_in[1]â True  and digital_in[2]â False " "noBreak"
          while (get_standard_digital_in(1) ==   True    and  get_standard_digital_in(2) ==   False  ):
            # begin: URCap Program Node
            #   Source: DornerConveyor, 1.0.0, Advanced Motion - Controls
            #   Type: Dorner Conveyor
            $ 39 "Conveyor :1,Fwd,100" "noBreak"
            set_standard_digital_out(7,True)
            set_standard_digital_out(6,False)
            set_analog_outputdomain(1,1)
            set_standard_analog_out(1,1.0)
            # end: URCap Program Node
          end
          $ 40 "Boucle 100000 fois" "noBreak"
          Boucle_5 = 0
          while (Boucle_5 < 100000):
            # begin: URCap Program Node
            #   Source: DornerConveyor, 1.0.0, Advanced Motion - Controls
            #   Type: Dorner Conveyor
            $ 41 "Conveyor :1,Fwd,100" "noBreak"
            set_standard_digital_out(7,True)
            set_standard_digital_out(6,False)
            set_analog_outputdomain(1,1)
            set_standard_analog_out(1,1.0)
            # end: URCap Program Node
            Boucle_5 = Boucle_5 + 1
          end
          cam_locate_monitor.incrementIndex("50904")
        end
        # end: URCap Program Node
        # begin: URCap Program Node
        #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
        #   Type: Si aucun objet nâest dÃ©tectÃ© par la camÃ©ra
        $ 42 "Si aucun objet nâest dÃ©tectÃ©" "noBreak"
        if (not cam_locate_monitor.hasFoundObjects("50904")):
          f[0] = 0
          $ 43 "'Optionnel'" "noBreak"
          # 'Optionnel'
        end
        # end: URCap Program Node
        # Restore feature pose
        Calib_2 = feature_pose_to_restore_50904
        
        #######VisionLocate node end########
        ###########################################
        
        # end: URCap Program Node
      end
    else:
      $ 44 "SinonSi digital_in[5]â True "
      if (get_standard_digital_in(5) ==   True  ):
        $ 45 "var_1â True "
        global var_1=  True  
        $ 46 "Boucle var_1â True "
        while (var_1 ==   True  ):
          $ 47 "DÃ©placementA"
          $ 48 "Waypoint_1" "breakAfter"
          movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
          $ 49 "DÃ©placementA"
          $ 50 "photo" "breakAfter"
          movej(get_inverse_kin(photo_p, qnear=photo_q), a=1.3962634015954636, v=1.0471975511965976)
          # begin: URCap Program Node
          #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
          #   Type: Localisation camÃ©ra
          $ 51 "Localisation camÃ©ra"
          
          ###########################################
          #######VisionLocate node start########
          
          f=[0,0.0,0.0,0.0,0.0,0.0,0.0,0]
          object_location=p[0.0,0.0,0.0,0.0,0.0,0.0]
          feature_pose_to_restore_26962 = Calib_2
          movej([-1.5836804548846644, -1.5576728147319336, -1.1589980125427246, -2.3950706921019496, 1.6015324592590332, -3.158562485371725])
          # Offset in translation only.
          snapshot_position_offset[3] = 0
          snapshot_position_offset[4] = 0
          snapshot_position_offset[5] = 0
          T_camera_in_flange = p[0, 0, 0, 0, 0, 0] # enlever une fois que l'enseignement du modele sera fait en faisant un movetool avec la pose de la camera dans le repere de la flange. Pour l'instant, on suppose que la camera est situee directement sur la flange.
          tool_26962 = get_T_in_base_from_flange(T_camera_in_flange)
          tool_26962 = pose_sub(tool_26962, snapshot_position_offset)
          snapshot_position = p[-0.129407, -0.233098, 0.365602, -2.74117, -0.00825141, -0.0507442]
          textmsg("expected snapshot position : ", snapshot_position)
          diff = pose_sub(tool_26962, snapshot_position)
          textmsg("diff = ", diff)
          is_at_snapshot_position = norm([diff[0], diff[1], diff[2]]) < 0.002
          is_at_snapshot_position = is_at_snapshot_position and (norm([diff[3], diff[4], diff[5]]) < 0.005)
          textmsg("is_at_snapshot_position = ", is_at_snapshot_position)
          is_snapshot_position_offset = norm(snapshot_position_offset) != 0
          is_at_snapshot_position = is_at_snapshot_position or ignore_snapshot_position
          if not(is_at_snapshot_position):
            popup("Robot is not at Snapshot Position. Add Move instruction to Snapshot Position before Camera Locate node.. Error code: [UCC-8]", warning = False, error = True)
            halt
          end
          f_26962 = xmlrpc_server.findmodel("contextName-26962", tool_26962[0], tool_26962[1], tool_26962[2], tool_26962[3], tool_26962[4], tool_26962[5])
          cam_locate_monitor.setFindModelResult("26962", f_26962)
          canSaveImage = True
          logging_service.publish("FIND_MODEL", f_26962)
          cam_locate_monitor.setCurrentObjectIndex("26962", 0)
          # begin: URCap Program Node
          #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
          #   Type: Boucle de la localisation de camÃ©ra
          $ 52 "Pour le ou les objets trouvÃ©s" "noBreak"
          object_teaching_location_26962 = p[-0.10858899682842695, -0.3298791170798341, 0.0013903307483954478, 2.186047489594667, -2.254339148656133, 0.01142036475668008]
          feature_teaching_location_26962 = p[-0.10858899682842695, -0.3298791170798341, 0.0013903307483954478, 2.246406672318401, 2.1857773971702463, -0.00217120647840988]
          while (not cam_locate_monitor.isCaptureNeeded("26962")):
            poseAsArray = cam_locate_monitor.getCurrentObjectPoseAsArray("26962")
            current_object_location_26962 = p[poseAsArray[0], poseAsArray[1], poseAsArray[2], poseAsArray[3], poseAsArray[4], poseAsArray[5]]
            object_location = current_object_location_26962
            f[0] = cam_locate_monitor.getNumberOfObjectsFound("26962")
            f[1] = object_location[0]
            f[2] = object_location[1]
            f[3] = object_location[2]
            f[4] = object_location[3]
            f[5] = object_location[4]
            f[6] = object_location[5]
            f[7] = cam_locate_monitor.getCurrentObjectDetectionScore("26962")
            textmsg("current_object_location = ", current_object_location_26962)
            if (norm(snapshot_position_offset) != 0):
              current_object_location_26962 = pose_add(current_object_location_26962, snapshot_position_offset)
              textmsg("current_object_location after snapshot position offset = ", current_object_location_26962)
            end
            Calib_2 = pose_trans(current_object_location_26962, pose_trans(pose_inv(object_teaching_location_26962), feature_teaching_location_26962))
            $ 53 "DÃ©placementL" "noBreak"
            $ 54 "approche" "noBreak"
            movel(pose_trans(Calib_1, pose_trans(p[.379088257553, .105726585325, -.047506941904, -2.247767499877, -2.191131924773, .000032734924], approche_p)), a=0.5079997256801482, v=0.4)
            $ 55 "recup" "noBreak"
            movel(pose_trans(Calib_1, pose_trans(p[.379088257553, .105726585325, -.047506941904, -2.247767499877, -2.191131924773, .000032734924], recup_p)), a=0.08, v=0.15)
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
            #   Type: Main
            $ 56 "DÃ©placement main55% (1)" "noBreak"
            if not(gripper_connected[0]):
              popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
            end
            rq_set_pos_spd_for(140, 0, 0, "1")
            rq_wait_pos_spe_for_request(140, 0, 0, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
            $ 57 "approche" "noBreak"
            movel(pose_trans(Calib_1, pose_trans(p[.379088257553, .105726585325, -.047506941904, -2.247767499877, -2.191131924773, .000032734924], approche_p)), a=0.08, v=0.15)
            $ 58 "post_prise" "noBreak"
            movel(pose_trans(Calib_1, pose_trans(p[.162610803914, -.321046559122, -.023829538781, -3.138426557699, .092719409522, -.002867798617], post_prise_p)), a=1.2, v=0.25)
            $ 59 "var_1â False " "noBreak"
            global var_1=  False  
            $ 60 "DÃ©placementA" "noBreak"
            $ 61 "pro_placer" "noBreak"
            movej(get_inverse_kin(pro_placer_p, qnear=pro_placer_q), a=1.3962634015954636, v=1.3962634015954636)
            $ 62 "Placer_rebus" "noBreak"
            movej(get_inverse_kin(Placer_rebus_p, qnear=Placer_rebus_q), a=1.3962634015954636, v=1.3962634015954636)
            # begin: URCap Program Node
            #   Source: Robotiq_Grippers, 1.8.6.7016, Robotiq Inc.
            #   Type: Main
            $ 63 "Ouverture main (1)" "noBreak"
            if not(gripper_connected[0]):
              popup("Main 1 doit Ãªtre connectÃ©e pour exÃ©cuter ce programme.", "Aucune connexion", False, True, True)
            end
            if not(rq_is_gripper_activated("1")):
              popup("Main 1 nâest pas activÃ©. AccÃ©dez Ã  lâonglet InstallationÂ > Gripper (Main) pour lâactiver et exÃ©cutez Ã  nouveau le programme.", "Non activÃ©", False, True, True)
            end
            rq_set_pos_spd_for(0, 0, 0, "1")
            rq_wait_pos_spe_for_request(0, 0, 0, "1")
            rq_go_to("1")
            rq_wait("1")
            # end: URCap Program Node
            $ 64 "PointPassage_6" "noBreak"
            movej(get_inverse_kin(PointPassage_6_p, qnear=PointPassage_6_q), a=1.3962634015954636, v=1.3962634015954636)
            $ 65 "retour_securise" "noBreak"
            movej(get_inverse_kin(retour_securise_p, qnear=retour_securise_q), a=1.3962634015954636, v=1.3962634015954636)
            cam_locate_monitor.incrementIndex("26962")
          end
          # end: URCap Program Node
          # begin: URCap Program Node
          #   Source: Robotiq_Wrist_Camera, 1.10.3.5692, Robotiq Inc.
          #   Type: Si aucun objet nâest dÃ©tectÃ© par la camÃ©ra
          $ 66 "Si aucun objet nâest dÃ©tectÃ©" "noBreak"
          if (not cam_locate_monitor.hasFoundObjects("26962")):
            f[0] = 0
            $ 67 "'Optionnel'" "noBreak"
            # 'Optionnel'
          end
          # end: URCap Program Node
          # Restore feature pose
          Calib_2 = feature_pose_to_restore_26962
          
          #######VisionLocate node end########
          ###########################################
          
          # end: URCap Program Node
        end
      end
    end
  end
end
